diff -ur libgd-2.3.3/configure.ac libgd-2.3.3.1/configure.ac
--- libgd-2.3.3/configure.ac	2021-09-11 07:43:11.000000000 +0300
+++ libgd-2.3.3.1/configure.ac	2025-06-11 23:07:05.415135155 +0300
@@ -249,6 +249,26 @@
   ])
 ])
 
+dnl Check for exif support.
+GD_LIB_PKG_CHECK([LIBEXIF], [EXIF], [exif], [libexif], [
+  AC_CHECK_HEADER([exif-data.h], [
+    AC_CHECK_LIB([exif], [exif_data_new_from_data], [dnl
+      AS_VAR_APPEND([LIBEXIF_LIBS], [" -lexif"])
+      gd_found_lib=yes
+    ])
+  ])
+])
+
+dnl Check for exif support.
+GD_LIB_PKG_CHECK([LIBEXIF], [EXIF], [exif], [libexif], [
+  AC_CHECK_HEADER([exif-data.h], [
+    AC_CHECK_LIB([exif], [exif_data_new_from_data], [dnl
+      AS_VAR_APPEND([LIBEXIF_LIBS], [" -lexif"])
+      gd_found_lib=yes
+    ])
+  ])
+])
+
 dnl Check for libimagequant support.
 GD_LIB_CHECK([LIBIMAGEQUANT], [LIQ], [liq], [
   AC_CHECK_HEADER([libimagequant.h], [
@@ -335,6 +355,7 @@
    Support for TIFF library:         $gd_with_LIBTIFF
    Support for Freetype 2.x library: $gd_with_LIBFREETYPE
    Support for Fontconfig library:   $gd_with_LIBFONTCONFIG
+   Support for EXIF library:         $gd_with_LIBEXIF
    Support for Xpm library:          $gd_with_LIBXPM
    Support for liq library:          $gd_with_LIBIMAGEQUANT
    Support for complex text:         $gd_with_LIBRAQM
diff -ur libgd-2.3.3/src/gd_intern.h libgd-2.3.3.1/src/gd_intern.h
--- libgd-2.3.3/src/gd_intern.h	2021-09-11 07:43:11.000000000 +0300
+++ libgd-2.3.3.1/src/gd_intern.h	2025-06-11 22:24:41.472891061 +0300
@@ -84,7 +84,16 @@
 gdImagePtr gdImageRotate180(gdImagePtr src, int ignoretransparent);
 gdImagePtr gdImageRotate270(gdImagePtr src, int ignoretransparent);
 
+gdImagePtr gdImageFlipHRotate90(gdImagePtr src, int ignoretransparent);
+gdImagePtr gdImageFlipHRotate180(gdImagePtr src, int ignoretransparent);
+gdImagePtr gdImageFlipHRotate270(gdImagePtr src, int ignoretransparent);
 
+gdImagePtr gdImageFlipVRotate90(gdImagePtr src, int ignoretransparent);
+gdImagePtr gdImageFlipVRotate180(gdImagePtr src, int ignoretransparent);
+gdImagePtr gdImageFlipVRotate270(gdImagePtr src, int ignoretransparent);
+
+gdImagePtr gdImageFlipH(gdImagePtr src, int ignoretransparent);
+gdImagePtr gdImageFlipV(gdImagePtr src, int ignoretransparent);
 
 
 
--- libgd-2.3.3/src/gd_jpeg.c	2021-09-11 07:43:11.000000000 +0300
+++ libgd-2.3.3.1/src/gd_jpeg.c	2025-06-11 22:24:41.473891053 +0300
@@ -36,7 +36,12 @@
 #include <limits.h>
 #include <string.h>
 
+#ifdef HAVE_LIBEXIF
+# include <libexif/exif-data.h>
+#endif
+
 #include "gd.h"
+#include "gd_intern.h"
 #include "gd_errors.h"
 /* TBB: move this up so include files are not brought in */
 /* JCE: arrange HAVE_LIBJPEG so that it can be set in gd.h */
@@ -59,6 +64,34 @@
 }
 jmpbuf_wrapper;
 
+#ifdef HAVE_LIBEXIF
+static int get_orientation(unsigned char *exif, int exif_size)
+{
+	ExifData *d;
+	ExifEntry *entry;
+	ExifByteOrder byte_order;
+
+	int orientation;
+
+	d = exif_data_new_from_data((const unsigned char*)exif, exif_size);
+	if (d == NULL)
+		return 0;
+
+	entry = exif_data_get_entry(d, EXIF_TAG_ORIENTATION);
+	if (entry) {
+		byte_order = exif_data_get_byte_order(d);
+		orientation = exif_get_short(entry->data, byte_order);
+	}
+	else {
+		orientation = 0;
+	}
+
+	exif_data_free(d);
+
+	return orientation;
+}
+#endif
+
 static void jpeg_emit_message(j_common_ptr jpeg_info, int level)
 {
 	char message[JMSG_LENGTH_MAX];
@@ -559,6 +592,7 @@
 {
 	struct jpeg_decompress_struct cinfo;
 	struct jpeg_error_mgr jerr;
+	jpeg_saved_marker_ptr marker;
 	jmpbuf_wrapper jmpbufw;
 	/* volatile so we can gdFree them after longjmp */
 	volatile JSAMPROW row = 0;
@@ -603,6 +637,11 @@
 
 	jpeg_gdIOCtx_src(&cinfo, infile);
 
+#ifdef HAVE_LIBEXIF
+	/* save APP1 marker to get EXIF orientation */
+	jpeg_save_markers(&cinfo, JPEG_APP0 + 1, 0xFFFF);
+#endif
+
 	/* 2.0.22: save the APP14 marker to check for Adobe Photoshop CMYK
 	 * files with inverted components.
 	 */
@@ -726,7 +765,6 @@
 		}
 		channels = 3;
 	} else if(cinfo.out_color_space == JCS_CMYK) {
-		jpeg_saved_marker_ptr marker;
 		if(cinfo.output_components != 4) {
 			gd_error("gd-jpeg: error: JPEG color quantization"
 			         " request resulted in output_components == %d"
@@ -797,6 +835,48 @@
 		}
 	}
 
+#ifdef HAVE_LIBEXIF
+	/* apply orientation */
+	marker = cinfo.marker_list;
+	while (marker) {
+		if (marker->marker == (JPEG_APP0 + 1)) {
+			gdImagePtr im2 = NULL;
+
+			switch (get_orientation(marker->data, marker->data_length)) {
+				case 2:
+					im2 = gdImageFlipH(im, 0);
+					break;
+				case 3:
+					im2 = gdImageRotate180(im, 0);
+					break;
+				case 4:
+					im2 = gdImageFlipV(im, 0);
+					break;
+				case 5:
+					im2 = gdImageFlipHRotate90(im, 0);
+					break;
+				case 6:
+					im2 = gdImageRotate270(im, 0);
+					break;
+				case 7:
+					im2 = gdImageFlipHRotate270(im, 0);
+					break;
+				case 8:
+					im2 = gdImageRotate90(im, 0);
+					break;
+			}
+
+			if (im2 != NULL) {
+				gdImageDestroy(im);
+				im = im2;
+			}
+
+			break;
+		}
+		marker = marker->next;
+	}
+#endif
+
 	if(jpeg_finish_decompress (&cinfo) != TRUE) {
 		gd_error("gd-jpeg: warning: jpeg_finish_decompress"
 		         " reports suspended data source\n");
--- libgd-2.3.3/src/gd_rotate.c	2021-09-11 07:41:44.000000000 +0300
+++ libgd-2.3.3.1/src/gd_rotate.c	2025-06-11 23:22:55.222654218 +0300
@@ -17,6 +17,41 @@
 
 typedef int (BGD_STDCALL *FuncPtr)(gdImagePtr, int, int);
 
+static int rot90x(gdImagePtr dst, int x, int y);
+static int rot90y(gdImagePtr dst, int x, int y);
+
+static int rot180x(gdImagePtr dst, int x, int y);
+static int rot180y(gdImagePtr dst, int x, int y);
+
+static int rot270x(gdImagePtr dst, int x, int y);
+static int rot270y(gdImagePtr dst, int x, int y);
+
+static int flipHrot90x(gdImagePtr dst, int x, int y);
+static int flipHrot90y(gdImagePtr dst, int x, int y);
+
+static int flipHrot180x(gdImagePtr dst, int x, int y);
+static int flipHrot180y(gdImagePtr dst, int x, int y);
+
+static int flipHrot270x(gdImagePtr dst, int x, int y);
+static int flipHrot270y(gdImagePtr dst, int x, int y);
+
+static int flipVrot90x(gdImagePtr dst, int x, int y);
+static int flipVrot90y(gdImagePtr dst, int x, int y);
+
+static int flipVrot180x(gdImagePtr dst, int x, int y);
+static int flipVrot180y(gdImagePtr dst, int x, int y);
+
+static int flipVrot270x(gdImagePtr dst, int x, int y);
+static int flipVrot270y(gdImagePtr dst, int x, int y);
+
+static int flipHx(gdImagePtr dst, int x, int y);
+static int flipHy(gdImagePtr dst, int x, int y);
+
+static int flipVx(gdImagePtr dst, int x, int y);
+static int flipVy(gdImagePtr dst, int x, int y);
+
+static gdImagePtr gdImageRotateHelper(gdImagePtr src, int ignoretransparent, int dstW, int dstH, FuncPtr transX, FuncPtr transY);
+
 #define ROTATE_DEG2RAD  3.1415926535897932384626433832795/180
 void gdImageSkewX (gdImagePtr dst, gdImagePtr src, int uRow, int iOffset, double dWeight, int clrBack, int ignoretransparent)
 {
@@ -225,10 +260,76 @@
 }
 
 /* Rotates an image by 90 degrees (counter clockwise) */
-gdImagePtr gdImageRotate90 (gdImagePtr src, int ignoretransparent)
+BGD_DECLARE(gdImagePtr) gdImageRotate90(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, rot90x, rot90y);
+}
+
+/* Rotates an image by 180 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageRotate180(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sx, src->sy, rot180x, rot180y);
+}
+
+/* Rotates an image by 270 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageRotate270(gdImagePtr src, int ignoretransparent)
 {
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, rot270x, rot270y);
+}
+
+/* Rotates an horizontal flipped image by 90 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipHRotate90(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, flipHrot90x, flipHrot90y);
+}
+
+/* Rotates an horizontal flipped image by 180 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipHRotate180(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sx, src->sy, flipHrot180x, flipHrot180y);
+}
+
+/* Rotates an horizontal flipped image by 270 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipHRotate270(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, flipHrot270x, flipHrot270y);
+}
+
+/* Rotates an vertical flipped image by 90 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipVRotate90(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, flipVrot90x, flipVrot90y);
+}
+
+/* Rotates an vertical flipped image by 180 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipVRotate180(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sx, src->sy, flipVrot180x, flipVrot180y);
+}
+
+/* Rotates an vertical flipped image by 270 degrees (counter clockwise) */
+BGD_DECLARE(gdImagePtr) gdImageFlipVRotate270(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sy, src->sx, flipVrot270x, flipVrot270y);
+}
+
+/* Flip an image horizontally */
+BGD_DECLARE(gdImagePtr) gdImageFlipH(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sx, src->sy, flipHx, flipHy);
+}
+
+/* Flip an image vertically */
+BGD_DECLARE(gdImagePtr) gdImageFlipV(gdImagePtr src, int ignoretransparent)
+{
+	return gdImageRotateHelper(src, ignoretransparent, src->sx, src->sy, flipVx, flipVy);
+}
+
+/* Rotates an image */
+static gdImagePtr gdImageRotateHelper(gdImagePtr src, int ignoretransparent, int dstW, int dstH, FuncPtr transX, FuncPtr transY){
 	int uY, uX;
-	int c,r,g,b,a;
+	int dstX, dstY;
+	int c, r, g, b, a;
 	gdImagePtr dst;
 	FuncPtr f;
 
@@ -237,7 +338,7 @@
 	} else {
 		f = gdImageGetPixel;
 	}
-	dst = gdImageCreateTrueColor(src->sy, src->sx);
+	dst = gdImageCreateTrueColor(dstW, dstH);
 	if (dst != NULL) {
 		int old_blendmode = dst->alphaBlendingFlag;
 		dst->alphaBlendingFlag = 0;
@@ -256,10 +357,14 @@
 					a = gdImageAlpha(src,c);
 					c = gdTrueColorAlpha(r, g, b, a);
 				}
+				
+				dstX = transX(dst, uX, uY);
+				dstY = transY(dst, uX, uY);
+
 				if (ignoretransparent && c == dst->transparent) {
-					gdImageSetPixel(dst, uY, (dst->sy - uX - 1), dst->transparent);
+					gdImageSetPixel(dst, dstX, dstY, dst->transparent);
 				} else {
-					gdImageSetPixel(dst, uY, (dst->sy - uX - 1), c);
+					gdImageSetPixel(dst, dstX, dstY, c);
 				}
 			}
 		}
@@ -269,96 +374,112 @@
 	return dst;
 }
 
-/* Rotates an image by 180 degrees (counter clockwise) */
-gdImagePtr gdImageRotate180 (gdImagePtr src, int ignoretransparent)
+static int rot90x(gdImagePtr dst, int x, int y)
 {
-	int uY, uX;
-	int c,r,g,b,a;
-	gdImagePtr dst;
-	FuncPtr f;
+	return y;
+}
 
-	if (src->trueColor) {
-		f = gdImageGetTrueColorPixel;
-	} else {
-		f = gdImageGetPixel;
-	}
-	dst = gdImageCreateTrueColor(src->sx, src->sy);
+static int rot90y(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - x - 1);
+}
 
-	if (dst != NULL) {
-		int old_blendmode = dst->alphaBlendingFlag;
-		dst->alphaBlendingFlag = 0;
+static int rot180x(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - x - 1);
+}
 
-		dst->transparent = src->transparent;
+static int rot180y(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - y - 1);
+}
 
-		gdImagePaletteCopy (dst, src);
+static int rot270x(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - y - 1);
+}
 
-		for (uY = 0; uY<src->sy; uY++) {
-			for (uX = 0; uX<src->sx; uX++) {
-				c = f (src, uX, uY);
-				if (!src->trueColor) {
-					r = gdImageRed(src,c);
-					g = gdImageGreen(src,c);
-					b = gdImageBlue(src,c);
-					a = gdImageAlpha(src,c);
-					c = gdTrueColorAlpha(r, g, b, a);
-				}
+static int rot270y(gdImagePtr dst, int x, int y)
+{
+	return x;
+}
 
-				if (ignoretransparent && c == dst->transparent) {
-					gdImageSetPixel(dst, (dst->sx - uX - 1), (dst->sy - uY - 1), dst->transparent);
-				} else {
-					gdImageSetPixel(dst, (dst->sx - uX - 1), (dst->sy - uY - 1), c);
-				}
-			}
-		}
-		dst->alphaBlendingFlag = old_blendmode;
-	}
+static int flipHrot90x(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - y - 1);
+}
 
-	return dst;
+static int flipHrot90y(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - x - 1);
 }
 
-/* Rotates an image by 270 degrees (counter clockwise) */
-gdImagePtr gdImageRotate270 (gdImagePtr src, int ignoretransparent)
+static int flipHrot180x(gdImagePtr dst, int x, int y)
 {
-	int uY, uX;
-	int c,r,g,b,a;
-	gdImagePtr dst;
-	FuncPtr f;
+	return x;
+}
 
-	if (src->trueColor) {
-		f = gdImageGetTrueColorPixel;
-	} else {
-		f = gdImageGetPixel;
-	}
-	dst = gdImageCreateTrueColor (src->sy, src->sx);
+static int flipHrot180y(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - y - 1);
+}
 
-	if (dst != NULL) {
-		int old_blendmode = dst->alphaBlendingFlag;
-		dst->alphaBlendingFlag = 0;
+static int flipHrot270x(gdImagePtr dst, int x, int y)
+{
+	return y;
+}
 
-		dst->transparent = src->transparent;
+static int flipHrot270y(gdImagePtr dst, int x, int y)
+{
+	return x;
+}
 
-		gdImagePaletteCopy (dst, src);
+static int flipVrot90x(gdImagePtr dst, int x, int y)
+{
+	return y;
+}
 
-		for (uY = 0; uY<src->sy; uY++) {
-			for (uX = 0; uX<src->sx; uX++) {
-				c = f (src, uX, uY);
-				if (!src->trueColor) {
-					r = gdImageRed(src,c);
-					g = gdImageGreen(src,c);
-					b = gdImageBlue(src,c);
-					a = gdImageAlpha(src,c);
-					c = gdTrueColorAlpha(r, g, b, a);
-				}
+static int flipVrot90y(gdImagePtr dst, int x, int y)
+{
+	return x;
+}
 
-				if (ignoretransparent && c == dst->transparent) {
-					gdImageSetPixel(dst, (dst->sx - uY - 1), uX, dst->transparent);
-				} else {
-					gdImageSetPixel(dst, (dst->sx - uY - 1), uX, c);
-				}
-			}
-		}
-		dst->alphaBlendingFlag = old_blendmode;
-	}
+static int flipVrot180x(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - x - 1);
+}
 
-	return dst;
+static int flipVrot180y(gdImagePtr dst, int x, int y)
+{
+	return y;
+}
+
+static int flipVrot270x(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - y - 1);
+}
+
+static int flipVrot270y(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - x - 1);
+}
+
+static int flipHx(gdImagePtr dst, int x, int y)
+{
+	return (dst->sx - x - 1);
 }
+
+static int flipHy(gdImagePtr dst, int x, int y)
+{
+	return y;
+}
+
+static int flipVx(gdImagePtr dst, int x, int y)
+{
+	return x;
+}
+static int flipVy(gdImagePtr dst, int x, int y)
+{
+	return (dst->sy - y - 1);
+}
+
